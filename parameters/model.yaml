# --------------------------------------------------------------------------------
# 回归任务 -- 机器学习模型（来源于 sklearn 模块，部分支持多步预测）
# --------------------------------------------------------------------------------

# SVR 模型参数
SVR:
 kernel: rbf  # 核函数，默认为 rbf。
 C: 1.0  # 正则化参数，默认为 1.0。
 epsilon: 0.1  # 不敏感区间，默认为 0.1。
 gamma: scale  # 核系数，默认为 scale。
 degree: 3  # 多项式核函数的次数，默认为 3。
 coef0: 0.0  # 核函数中的常数项，默认为 0.0。
 shrinking: True  # 是否使用启发式方法，默认为 True。
 tol: 0.001  # 容忍误差的阈值，默认为 0.001。
 cache_size: 200  # 缓存大小，默认为 200。

# GradientBoostingRegressor 模型参数
GradientBoostingRegressor:
 # 梯度提升树相关参数
 loss: squared_error  # 损失函数，默认为 squared_error。
 learning_rate: 0.1  # 学习率，默认为 0.1。
 n_estimators: 100  # 决策树的数量，默认为 100。
 subsample: 1.0  # 子采样率，默认为 1.0。
 criterion: friedman_mse  # 分裂节点的评价标准，默认为 friedman_mse。
 random_state: null  # 随机种子，默认为 null。
 # 树结构相关参数
 max_depth: 3  # 决策树的最大深度，默认为 3。
 min_samples_split: 2  # 内部节点再划分所需最小样本数，默认为 2。
 min_samples_leaf: 1  # 叶子节点最少样本数，默认为 1。
 max_features: null  # 寻找最佳分割时的特征数，默认为 null。

# AdaBoostRegressor 模型参数
AdaBoostRegressor:
 estimator: null  # 基本估计器，默认为 null。
 n_estimators: 50  # 决策树的数量（等于弱学习器的最大迭代次数），默认为 50。
 learning_rate: 1.0  # 学习率，默认为 1.0。
 loss: linear  # 损失函数，默认为 linear。
 random_state: null  # 随机种子，默认为 null。

# Ridge 模型参数（支持多步预测）
Ridge:
 alpha: 1.0  # 正则化强度，默认为 1.0。
 solver: auto  # 求解器，默认为 auto。
 fit_intercept: True  # 是否计算截距，默认为 True。
 max_iter: null  # 最大迭代次数，默认为 null。
 random_state: null  # 随机种子，默认为 null。
 tol: 0.001  # 容忍误差的阈值，默认为 0.001。

# RandomForestRegressor 模型参数（支持多步预测）
RandomForestRegressor:
 n_estimators: 100  # 决策树的数量，默认为 100。
 max_depth: null  # 决策树的最大深度，默认为 null。
 min_samples_split: 2  # 内部节点再划分所需最小样本数，默认为 2。
 min_samples_leaf: 1  # 叶子节点最少样本数，默认为 1。
 max_features: 1.0  # 在寻找最佳分割时需要考虑的特征数量，默认为 1.0。
 bootstrap: True  # 是否使用自助法，默认为 True。
 random_state: null  # 随机种子，默认为 null。

# BaggingRegressor 模型参数（支持多步预测）
BaggingRegressor:
 estimator: null  # 基础学习器。如果为 null，则默认使用 DecisionTreeRegressor。默认为 null。
 n_estimators: 10  # 集成中基学习器的数量。数量越多，效果可能越好，但计算成本更高。默认为 10。
 max_samples: 1.0  # 每个基学习器训练时使用样本的比例或数量。如果为浮点数（如 0.8），表示比例；整数表示样本数。默认为 1.0。
 max_features: 1.0  # 每个基学习器使用特征的比例或数量。类似于 max_samples，支持浮点数和整数。默认为 1.0。
 bootstrap: True  # 是否对样本进行有放回抽样。设置为 False 表示无放回抽样。默认为 True。
 bootstrap_features: False  # 是否对特征进行有放回抽样。默认为 False，使用所有特征。默认为 False。
 oob_score: False  # 是否使用袋外样本评估模型性能，仅在 bootstrap=True 时有效。默认为 False。
 warm_start: False  # 如果为 True，可以增量增加基学习器，而无需重新拟合模型。默认为 False。
 n_jobs: null  # 并行工作的数量。-1 表示使用所有可用 CPU 核心。默认为 null，表示 1。
 random_state: null  # 随机种子。默认为 null。
 verbose: 0  # 控制日志的输出量，0 表示无输出，1 表示适量输出，>1 表示详细输出。默认为 0。

# --------------------------------------------------------------------------------
# 回归任务 -- 深度学习模型（来源于 pytorch 模块，均支持多步预测）
# --------------------------------------------------------------------------------

# MLP 模型参数
MLP:
 # 隐藏层维度列表，默认为 null，表示直接映射到输出维度；第 2i-1 个 0 和 第 2i 个 0 之间有一个跳跃连接，如果两个输出维度一致那么直接相加，否则用一个线性层映射到 2i 的维度。
 hidden_sizes: [128, 512, 0, 2048, 512, 0, 128, 32, 0, 8]
 activation: relu  # 激活函数，默认为 relu。可选值为 relu、gelu、silu。
 dropout: 0.1  # dropout 概率，默认为 0.1。

# CAttn 模型参数
CAttn:
 embed_dim: 8  # 嵌入维度，默认为 8。
 num_heads: 2  # 多头注意力机制的头数，默认为 2。
 dropout: 0.1  # dropout 概率，默认为 0.1。
 bias: True  # 多头注意力机制是否使用偏置项，默认为 True。
 activation: relu  # 激活函数，默认为 relu。可选值为 relu、gelu、silu。

# CAttnProj 模型参数
CAttnProj:
 embed_dim: 8  # 嵌入维度，默认为 8。
 num_heads: 2  # 多头注意力机制的头数，默认为 2。
 project_size: 128  # 投影大小，默认为 256。
 feedforward: 512  # 前馈神经网络的隐藏层维度，默认为 2048。
 dropout: 0.1  # dropout 概率，默认为 0.1。
 bias: True  # 多头注意力机制是否使用偏置项，默认为 True。
 activation: relu  # 激活函数，默认为 relu。可选值为 relu、gelu、silu。

## C2L 模型参数
#C2L:
# activation: relu

# --------------------------------------------------------------------------------
# 时序任务 -- 深度学习模型（来源于 pytorch 模块，均支持多步预测）
# --------------------------------------------------------------------------------

# RNN 模型参数
RNN:
 hidden_size: 512  # 隐藏层节点数，默认为 128。
 num_layers: 4  # 网络层数，默认为 2。
 bidirectional: False  # 是否使用双向RNN，默认为 False。

# LSTM 模型参数
LSTM:
 hidden_size: 512  # 隐藏层节点数，默认为 128。
 num_layers: 4  # 网络层数，默认为 2。
 bidirectional: False  # 是否使用双向RNN，默认为 False。

# GRU 模型参数
GRU:
 hidden_size: 512  # 隐藏层节点数，默认为 128。
 num_layers: 4  # 网络层数，默认为 2。
 bidirectional: False  # 是否使用双向RNN，默认为 False。

# TranMLP 模型参数
TranMLP:
 encoder_model_dim: 128  # 编码器 TransformerEncoderLayer 模型维度，默认为 128。
 encoder_head_num: 8  # 编码器 TransformerEncoderLayer 多头注意力机制的头数，默认为 8。
 encoder_feedforward_dim: 512  # 编码器 TransformerEncoderLayer 前馈神经网络的隐藏层维度，默认为 2048。
 encoder_layer_num: 4  # 编码器 TransformerEncoderLayer 层数，默认为 2。
 decoder_hidden_sizes: [64, 16, 4]  # 解码器全连接层的隐藏层维度列表，默认为 null，表示直接映射到输出维度。
 activation: relu  # 编码器和解码器的激活函数，默认为 relu。可选值为 relu、gelu。
 dropout: 0.1  # 编码器 TransformerEncoderLayer 和 解码器全连接层的 dropout 概率，默认为 0.1。
 max_length: 100  # 位置编码的最大长度，默认为 1000。主要用于位置编码。注：该参数值必须要大于时间步。

# TranAttnFNN 模型参数
TranAttnFNN:
 encoder_model_dim: 128  # 编码器 TransformerEncoderLayer 模型维度，默认为 128。
 encoder_head_num: 8  # 编码器 TransformerEncoderLayer 多头注意力机制的头数，默认为 8。
 encoder_feedforward_dim: 512  # 编码器 TransformerEncoderLayer 前馈神经网络的隐藏层维度，默认为 2048。
 encoder_layer_num: 4  # 编码器 TransformerEncoderLayer 层数，默认为 2。
 decoder_model_dim: 128  # 解码器 MultiHeadAttention 模型维度，默认值为 128。
 decoder_head_num: 8  # 解码器 MultiHeadAttention 多头注意力机制的头数，默认值为 8。
 decoder_feedforward_dim: 1024  # 解码器 MultiHeadAttention 前馈神经网络的隐藏层维度，默认值为 2048。
 decoder_layer_num: 4  # 解码器 MultiHeadAttention 层数，默认值为 2。
 activation: relu  # 编码器和解码器的激活函数，默认为 relu。可选值为 relu、gelu。
 dropout: 0.1  # 编码器 TransformerEncoderLayer 和 解码器 MultiHeadAttention 的 dropout 概率，默认为 0.1。
 max_length: 100  # 位置编码的最大长度，默认为 1000。主要用于位置编码。注：该参数值必须要大于时间步。

# --------------------------------------------------------------------------------
# 深度学习模型训练参数（所有深度学习模型共用一组训练参数）
# --------------------------------------------------------------------------------
Train:  # 该键名不可修改，下面的键名也不可修改。
 epochs: 300  # 训练轮数，默认为 300。
 learning_rate: 0.001  # 学习率，默认为 0.001。
 weight_decay: 0.0001  # 权重衰减，默认为 0.0001。
 clip_norm: 1.0  # 梯度裁剪阈值，默认为 null，表示不裁剪。
 ReduceLROnPlateau_factor: 0.3  # 学习率衰减因子，默认为 0.5。
 ReduceLROnPlateau_patience: 30  # 监测器函数不再减小的累计次数，默认为 10。
 ReduceLROnPlateau_threshold: 0.0001  # 只关注超过阈值的显著变化，默认为 0.0001。
 train_back: True  # 更新学习率的时候是否读取当前最优的模型。
 ignore_draw_epoch: 0  # 忽略绘制图像的轮数，默认为 0。
 ignore_draw_process: True  # 是否忽略绘制训练过程图像，默认为 True。

# Note 1：判断是否回归任务和时序任务的依据是自定义的模型中是否存在 time_step 参数，如果存在该参数定义为时序任务，否则为回归任务。
# Note 2：所有自定义的深度学习模型均基于 Pytorch 框架，并且必须包含 input_size 和 output_size 两个参数。
